// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tapestry_rpc.proto

/*
Package tapestry is a generated protocol buffer package.

It is generated from these files:
	tapestry_rpc.proto

It has these top-level messages:
	Ok
	IdMsg
	DataBlob
	Key
	NodeMsg
	NextHop
	Registration
	FetchedLocations
	Neighbors
	MulticastRequest
	TransferData
	BackpointerRequest
	LeaveNotification
*/
package tapestry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ok struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (m *Ok) Reset()                    { *m = Ok{} }
func (m *Ok) String() string            { return proto.CompactTextString(m) }
func (*Ok) ProtoMessage()               {}
func (*Ok) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ok) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Ok) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type IdMsg struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *IdMsg) Reset()                    { *m = IdMsg{} }
func (m *IdMsg) String() string            { return proto.CompactTextString(m) }
func (*IdMsg) ProtoMessage()               {}
func (*IdMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IdMsg) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DataBlob struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *DataBlob) Reset()                    { *m = DataBlob{} }
func (m *DataBlob) String() string            { return proto.CompactTextString(m) }
func (*DataBlob) ProtoMessage()               {}
func (*DataBlob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DataBlob) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DataBlob) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Key struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type NodeMsg struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *NodeMsg) Reset()                    { *m = NodeMsg{} }
func (m *NodeMsg) String() string            { return proto.CompactTextString(m) }
func (*NodeMsg) ProtoMessage()               {}
func (*NodeMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NodeMsg) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NodeMsg) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type NextHop struct {
	Next    *NodeMsg `protobuf:"bytes,1,opt,name=next" json:"next,omitempty"`
	HasNext bool     `protobuf:"varint,2,opt,name=hasNext" json:"hasNext,omitempty"`
}

func (m *NextHop) Reset()                    { *m = NextHop{} }
func (m *NextHop) String() string            { return proto.CompactTextString(m) }
func (*NextHop) ProtoMessage()               {}
func (*NextHop) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NextHop) GetNext() *NodeMsg {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *NextHop) GetHasNext() bool {
	if m != nil {
		return m.HasNext
	}
	return false
}

type Registration struct {
	FromNode *NodeMsg `protobuf:"bytes,1,opt,name=fromNode" json:"fromNode,omitempty"`
	Key      string   `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *Registration) Reset()                    { *m = Registration{} }
func (m *Registration) String() string            { return proto.CompactTextString(m) }
func (*Registration) ProtoMessage()               {}
func (*Registration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Registration) GetFromNode() *NodeMsg {
	if m != nil {
		return m.FromNode
	}
	return nil
}

func (m *Registration) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type FetchedLocations struct {
	IsRoot bool       `protobuf:"varint,1,opt,name=isRoot" json:"isRoot,omitempty"`
	Values []*NodeMsg `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *FetchedLocations) Reset()                    { *m = FetchedLocations{} }
func (m *FetchedLocations) String() string            { return proto.CompactTextString(m) }
func (*FetchedLocations) ProtoMessage()               {}
func (*FetchedLocations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FetchedLocations) GetIsRoot() bool {
	if m != nil {
		return m.IsRoot
	}
	return false
}

func (m *FetchedLocations) GetValues() []*NodeMsg {
	if m != nil {
		return m.Values
	}
	return nil
}

type Neighbors struct {
	Neighbors []*NodeMsg `protobuf:"bytes,1,rep,name=neighbors" json:"neighbors,omitempty"`
}

func (m *Neighbors) Reset()                    { *m = Neighbors{} }
func (m *Neighbors) String() string            { return proto.CompactTextString(m) }
func (*Neighbors) ProtoMessage()               {}
func (*Neighbors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Neighbors) GetNeighbors() []*NodeMsg {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

type MulticastRequest struct {
	NewNode *NodeMsg `protobuf:"bytes,1,opt,name=newNode" json:"newNode,omitempty"`
	Level   int32    `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (m *MulticastRequest) Reset()                    { *m = MulticastRequest{} }
func (m *MulticastRequest) String() string            { return proto.CompactTextString(m) }
func (*MulticastRequest) ProtoMessage()               {}
func (*MulticastRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MulticastRequest) GetNewNode() *NodeMsg {
	if m != nil {
		return m.NewNode
	}
	return nil
}

func (m *MulticastRequest) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type TransferData struct {
	From *NodeMsg              `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Data map[string]*Neighbors `protobuf:"bytes,2,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TransferData) Reset()                    { *m = TransferData{} }
func (m *TransferData) String() string            { return proto.CompactTextString(m) }
func (*TransferData) ProtoMessage()               {}
func (*TransferData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TransferData) GetFrom() *NodeMsg {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TransferData) GetData() map[string]*Neighbors {
	if m != nil {
		return m.Data
	}
	return nil
}

type BackpointerRequest struct {
	From  *NodeMsg `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Level int32    `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (m *BackpointerRequest) Reset()                    { *m = BackpointerRequest{} }
func (m *BackpointerRequest) String() string            { return proto.CompactTextString(m) }
func (*BackpointerRequest) ProtoMessage()               {}
func (*BackpointerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BackpointerRequest) GetFrom() *NodeMsg {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *BackpointerRequest) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type LeaveNotification struct {
	From        *NodeMsg `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Replacement *NodeMsg `protobuf:"bytes,2,opt,name=replacement" json:"replacement,omitempty"`
}

func (m *LeaveNotification) Reset()                    { *m = LeaveNotification{} }
func (m *LeaveNotification) String() string            { return proto.CompactTextString(m) }
func (*LeaveNotification) ProtoMessage()               {}
func (*LeaveNotification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *LeaveNotification) GetFrom() *NodeMsg {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *LeaveNotification) GetReplacement() *NodeMsg {
	if m != nil {
		return m.Replacement
	}
	return nil
}

func init() {
	proto.RegisterType((*Ok)(nil), "tapestry.Ok")
	proto.RegisterType((*IdMsg)(nil), "tapestry.IdMsg")
	proto.RegisterType((*DataBlob)(nil), "tapestry.DataBlob")
	proto.RegisterType((*Key)(nil), "tapestry.Key")
	proto.RegisterType((*NodeMsg)(nil), "tapestry.NodeMsg")
	proto.RegisterType((*NextHop)(nil), "tapestry.NextHop")
	proto.RegisterType((*Registration)(nil), "tapestry.Registration")
	proto.RegisterType((*FetchedLocations)(nil), "tapestry.FetchedLocations")
	proto.RegisterType((*Neighbors)(nil), "tapestry.Neighbors")
	proto.RegisterType((*MulticastRequest)(nil), "tapestry.MulticastRequest")
	proto.RegisterType((*TransferData)(nil), "tapestry.TransferData")
	proto.RegisterType((*BackpointerRequest)(nil), "tapestry.BackpointerRequest")
	proto.RegisterType((*LeaveNotification)(nil), "tapestry.LeaveNotification")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TapestryRPC service

type TapestryRPCClient interface {
	HelloCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error)
	GetNextHopCaller(ctx context.Context, in *IdMsg, opts ...grpc.CallOption) (*NextHop, error)
	RegisterCaller(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Ok, error)
	FetchCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*FetchedLocations, error)
	AddNodeCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Neighbors, error)
	RemoveBadNodesCaller(ctx context.Context, in *Neighbors, opts ...grpc.CallOption) (*Ok, error)
	AddNodeMulticastCaller(ctx context.Context, in *MulticastRequest, opts ...grpc.CallOption) (*Neighbors, error)
	TransferCaller(ctx context.Context, in *TransferData, opts ...grpc.CallOption) (*Ok, error)
	AddBackpointerCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error)
	RemoveBackpointerCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error)
	GetBackpointersCaller(ctx context.Context, in *BackpointerRequest, opts ...grpc.CallOption) (*Neighbors, error)
	NotifyLeaveCaller(ctx context.Context, in *LeaveNotification, opts ...grpc.CallOption) (*Ok, error)
	BlobStoreFetchCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DataBlob, error)
	TapestryStoreCaller(ctx context.Context, in *DataBlob, opts ...grpc.CallOption) (*Ok, error)
	TapestryReplicateCaller(ctx context.Context, in *DataBlob, opts ...grpc.CallOption) (*Ok, error)
	TapestryLookupCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Neighbors, error)
}

type tapestryRPCClient struct {
	cc *grpc.ClientConn
}

func NewTapestryRPCClient(cc *grpc.ClientConn) TapestryRPCClient {
	return &tapestryRPCClient{cc}
}

func (c *tapestryRPCClient) HelloCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error) {
	out := new(NodeMsg)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/HelloCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) GetNextHopCaller(ctx context.Context, in *IdMsg, opts ...grpc.CallOption) (*NextHop, error) {
	out := new(NextHop)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/GetNextHopCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) RegisterCaller(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/RegisterCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) FetchCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*FetchedLocations, error) {
	out := new(FetchedLocations)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/FetchCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) AddNodeCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/AddNodeCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) RemoveBadNodesCaller(ctx context.Context, in *Neighbors, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/RemoveBadNodesCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) AddNodeMulticastCaller(ctx context.Context, in *MulticastRequest, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/AddNodeMulticastCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) TransferCaller(ctx context.Context, in *TransferData, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/TransferCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) AddBackpointerCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/AddBackpointerCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) RemoveBackpointerCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/RemoveBackpointerCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) GetBackpointersCaller(ctx context.Context, in *BackpointerRequest, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/GetBackpointersCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) NotifyLeaveCaller(ctx context.Context, in *LeaveNotification, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/NotifyLeaveCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) BlobStoreFetchCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DataBlob, error) {
	out := new(DataBlob)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/BlobStoreFetchCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) TapestryStoreCaller(ctx context.Context, in *DataBlob, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/TapestryStoreCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) TapestryReplicateCaller(ctx context.Context, in *DataBlob, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/TapestryReplicateCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) TapestryLookupCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := grpc.Invoke(ctx, "/tapestry.TapestryRPC/TapestryLookupCaller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TapestryRPC service

type TapestryRPCServer interface {
	HelloCaller(context.Context, *NodeMsg) (*NodeMsg, error)
	GetNextHopCaller(context.Context, *IdMsg) (*NextHop, error)
	RegisterCaller(context.Context, *Registration) (*Ok, error)
	FetchCaller(context.Context, *Key) (*FetchedLocations, error)
	AddNodeCaller(context.Context, *NodeMsg) (*Neighbors, error)
	RemoveBadNodesCaller(context.Context, *Neighbors) (*Ok, error)
	AddNodeMulticastCaller(context.Context, *MulticastRequest) (*Neighbors, error)
	TransferCaller(context.Context, *TransferData) (*Ok, error)
	AddBackpointerCaller(context.Context, *NodeMsg) (*Ok, error)
	RemoveBackpointerCaller(context.Context, *NodeMsg) (*Ok, error)
	GetBackpointersCaller(context.Context, *BackpointerRequest) (*Neighbors, error)
	NotifyLeaveCaller(context.Context, *LeaveNotification) (*Ok, error)
	BlobStoreFetchCaller(context.Context, *Key) (*DataBlob, error)
	TapestryStoreCaller(context.Context, *DataBlob) (*Ok, error)
	TapestryReplicateCaller(context.Context, *DataBlob) (*Ok, error)
	TapestryLookupCaller(context.Context, *Key) (*Neighbors, error)
}

func RegisterTapestryRPCServer(s *grpc.Server, srv TapestryRPCServer) {
	s.RegisterService(&_TapestryRPC_serviceDesc, srv)
}

func _TapestryRPC_HelloCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).HelloCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/HelloCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).HelloCaller(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_GetNextHopCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).GetNextHopCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/GetNextHopCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).GetNextHopCaller(ctx, req.(*IdMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_RegisterCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).RegisterCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/RegisterCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).RegisterCaller(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_FetchCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).FetchCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/FetchCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).FetchCaller(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_AddNodeCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).AddNodeCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/AddNodeCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).AddNodeCaller(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_RemoveBadNodesCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Neighbors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).RemoveBadNodesCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/RemoveBadNodesCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).RemoveBadNodesCaller(ctx, req.(*Neighbors))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_AddNodeMulticastCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).AddNodeMulticastCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/AddNodeMulticastCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).AddNodeMulticastCaller(ctx, req.(*MulticastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_TransferCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).TransferCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/TransferCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).TransferCaller(ctx, req.(*TransferData))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_AddBackpointerCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).AddBackpointerCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/AddBackpointerCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).AddBackpointerCaller(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_RemoveBackpointerCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).RemoveBackpointerCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/RemoveBackpointerCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).RemoveBackpointerCaller(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_GetBackpointersCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackpointerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).GetBackpointersCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/GetBackpointersCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).GetBackpointersCaller(ctx, req.(*BackpointerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_NotifyLeaveCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).NotifyLeaveCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/NotifyLeaveCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).NotifyLeaveCaller(ctx, req.(*LeaveNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_BlobStoreFetchCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).BlobStoreFetchCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/BlobStoreFetchCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).BlobStoreFetchCaller(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_TapestryStoreCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataBlob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).TapestryStoreCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/TapestryStoreCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).TapestryStoreCaller(ctx, req.(*DataBlob))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_TapestryReplicateCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataBlob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).TapestryReplicateCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/TapestryReplicateCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).TapestryReplicateCaller(ctx, req.(*DataBlob))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_TapestryLookupCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).TapestryLookupCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/TapestryLookupCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).TapestryLookupCaller(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

var _TapestryRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tapestry.TapestryRPC",
	HandlerType: (*TapestryRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloCaller",
			Handler:    _TapestryRPC_HelloCaller_Handler,
		},
		{
			MethodName: "GetNextHopCaller",
			Handler:    _TapestryRPC_GetNextHopCaller_Handler,
		},
		{
			MethodName: "RegisterCaller",
			Handler:    _TapestryRPC_RegisterCaller_Handler,
		},
		{
			MethodName: "FetchCaller",
			Handler:    _TapestryRPC_FetchCaller_Handler,
		},
		{
			MethodName: "AddNodeCaller",
			Handler:    _TapestryRPC_AddNodeCaller_Handler,
		},
		{
			MethodName: "RemoveBadNodesCaller",
			Handler:    _TapestryRPC_RemoveBadNodesCaller_Handler,
		},
		{
			MethodName: "AddNodeMulticastCaller",
			Handler:    _TapestryRPC_AddNodeMulticastCaller_Handler,
		},
		{
			MethodName: "TransferCaller",
			Handler:    _TapestryRPC_TransferCaller_Handler,
		},
		{
			MethodName: "AddBackpointerCaller",
			Handler:    _TapestryRPC_AddBackpointerCaller_Handler,
		},
		{
			MethodName: "RemoveBackpointerCaller",
			Handler:    _TapestryRPC_RemoveBackpointerCaller_Handler,
		},
		{
			MethodName: "GetBackpointersCaller",
			Handler:    _TapestryRPC_GetBackpointersCaller_Handler,
		},
		{
			MethodName: "NotifyLeaveCaller",
			Handler:    _TapestryRPC_NotifyLeaveCaller_Handler,
		},
		{
			MethodName: "BlobStoreFetchCaller",
			Handler:    _TapestryRPC_BlobStoreFetchCaller_Handler,
		},
		{
			MethodName: "TapestryStoreCaller",
			Handler:    _TapestryRPC_TapestryStoreCaller_Handler,
		},
		{
			MethodName: "TapestryReplicateCaller",
			Handler:    _TapestryRPC_TapestryReplicateCaller_Handler,
		},
		{
			MethodName: "TapestryLookupCaller",
			Handler:    _TapestryRPC_TapestryLookupCaller_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tapestry_rpc.proto",
}

func init() { proto.RegisterFile("tapestry_rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0x6d, 0x4f, 0x13, 0x4b,
	0x14, 0x6e, 0xb7, 0x94, 0xb6, 0xa7, 0x85, 0x0b, 0x43, 0x2f, 0x6d, 0x7a, 0xef, 0x87, 0x66, 0x13,
	0x13, 0x88, 0x5a, 0x0d, 0x68, 0xc2, 0x9b, 0x89, 0x80, 0x0a, 0x4a, 0x29, 0xba, 0xe2, 0x67, 0x33,
	0x74, 0x0f, 0xb0, 0xe9, 0xb2, 0xb3, 0xce, 0x4e, 0x2b, 0xfd, 0x69, 0xfe, 0x2c, 0xff, 0x81, 0x99,
	0xe9, 0x4c, 0x77, 0x65, 0xb7, 0x04, 0xfd, 0x42, 0x7a, 0x66, 0x9e, 0xe7, 0xbc, 0x3c, 0x73, 0x1e,
	0x16, 0x88, 0xa0, 0x21, 0x46, 0x82, 0x8f, 0xbf, 0xf2, 0xb0, 0xdf, 0x09, 0x39, 0x13, 0x8c, 0x94,
	0xcd, 0x99, 0xfd, 0x04, 0xac, 0xb3, 0x01, 0x59, 0x04, 0x8b, 0x0d, 0x9a, 0xf9, 0x76, 0x7e, 0xad,
	0xec, 0x58, 0x6c, 0x40, 0x56, 0x61, 0x9e, 0x23, 0x8d, 0x58, 0xd0, 0xb4, 0xda, 0xf9, 0xb5, 0x8a,
	0xa3, 0x23, 0xbb, 0x01, 0xc5, 0xf7, 0xee, 0x69, 0x74, 0x25, 0x09, 0x9e, 0xab, 0x08, 0x15, 0xc7,
	0xf2, 0x5c, 0xfb, 0x39, 0x94, 0xdf, 0x50, 0x41, 0x0f, 0x7c, 0x76, 0x41, 0x08, 0xcc, 0xb9, 0x54,
	0x50, 0x75, 0x5b, 0x73, 0xd4, 0x6f, 0xb2, 0x04, 0x85, 0x01, 0x8e, 0x75, 0x36, 0xf9, 0xd3, 0x6e,
	0x40, 0xe1, 0x04, 0xc7, 0xe6, 0x22, 0x1f, 0x5f, 0x6c, 0x42, 0xa9, 0xc7, 0x5c, 0x94, 0x55, 0x9a,
	0x50, 0xa2, 0xae, 0xcb, 0x31, 0x8a, 0x34, 0xc0, 0x84, 0xba, 0xbe, 0x35, 0xad, 0xff, 0x01, 0x4a,
	0x3d, 0xbc, 0x15, 0xc7, 0x2c, 0x24, 0x8f, 0x60, 0x2e, 0xc0, 0x5b, 0xa1, 0x18, 0xd5, 0x8d, 0xe5,
	0x8e, 0x19, 0xb5, 0xa3, 0xb3, 0x3a, 0xea, 0x5a, 0xe6, 0xbe, 0xa6, 0x91, 0x24, 0xa9, 0x34, 0x65,
	0xc7, 0x84, 0xf6, 0x19, 0xd4, 0x1c, 0xbc, 0xf2, 0x22, 0xc1, 0xa9, 0xf0, 0x58, 0x40, 0x9e, 0x42,
	0xf9, 0x92, 0xb3, 0x1b, 0x49, 0x9f, 0x9d, 0x74, 0x0a, 0xc9, 0x18, 0xf5, 0x0b, 0x2c, 0xbd, 0x43,
	0xd1, 0xbf, 0x46, 0xb7, 0xcb, 0xfa, 0x2a, 0x67, 0x24, 0x15, 0xf6, 0x22, 0x87, 0x31, 0xa1, 0x55,
	0xd7, 0x11, 0x59, 0x87, 0xf9, 0x11, 0xf5, 0x87, 0x18, 0x35, 0x0b, 0xed, 0x42, 0x76, 0x29, 0x0d,
	0xb0, 0xf7, 0xa0, 0xd2, 0x43, 0xef, 0xea, 0xfa, 0x82, 0xf1, 0x88, 0x3c, 0x83, 0x4a, 0x60, 0x82,
	0x66, 0x7e, 0x16, 0x35, 0xc6, 0xc8, 0xa6, 0x4e, 0x87, 0xbe, 0xf0, 0xfa, 0x34, 0x12, 0x0e, 0x7e,
	0x1b, 0x62, 0x24, 0xc8, 0x63, 0x28, 0x05, 0xf8, 0xfd, 0xfe, 0x41, 0x0d, 0x82, 0xd4, 0xa1, 0xe8,
	0xe3, 0x08, 0x7d, 0x35, 0x69, 0xd1, 0x99, 0x04, 0xf6, 0x8f, 0x3c, 0xd4, 0xce, 0x39, 0x0d, 0xa2,
	0x4b, 0xe4, 0x72, 0x23, 0xe4, 0x73, 0x48, 0x69, 0xee, 0x79, 0x0e, 0x79, 0x4d, 0x5e, 0xe8, 0xa5,
	0xb1, 0x54, 0xeb, 0xed, 0x18, 0x96, 0x4c, 0xd6, 0x91, 0x7f, 0xde, 0x06, 0x82, 0x8f, 0x27, 0x6b,
	0xd5, 0xea, 0x42, 0x65, 0x7a, 0x94, 0x5e, 0x25, 0xb2, 0x0e, 0x45, 0xa5, 0x95, 0x6a, 0xb1, 0xba,
	0xb1, 0x92, 0x28, 0x6e, 0x74, 0x70, 0x26, 0x88, 0x1d, 0x6b, 0x2b, 0x6f, 0x7f, 0x02, 0x72, 0x40,
	0xfb, 0x83, 0x90, 0x79, 0x81, 0x40, 0x6e, 0x44, 0x79, 0xe0, 0x00, 0xd9, 0x72, 0x30, 0x58, 0xee,
	0x22, 0x1d, 0x61, 0x8f, 0x09, 0xef, 0xd2, 0x9b, 0x3c, 0xfe, 0x43, 0x33, 0x6e, 0x42, 0x95, 0x63,
	0xe8, 0xd3, 0x3e, 0xde, 0x60, 0x20, 0xf4, 0x0c, 0x19, 0xe8, 0x24, 0x6a, 0xe3, 0x67, 0x09, 0xaa,
	0xe7, 0x1a, 0xe1, 0x7c, 0x3c, 0x24, 0x2f, 0xa1, 0x7a, 0x8c, 0xbe, 0xcf, 0x0e, 0xa9, 0xef, 0x23,
	0x27, 0x69, 0x7a, 0x2b, 0x7d, 0x64, 0xe7, 0xc8, 0x16, 0x2c, 0x1d, 0xa1, 0xd0, 0x96, 0xd2, 0xdc,
	0x7f, 0x62, 0xa0, 0xfa, 0x27, 0xf0, 0x1b, 0x73, 0x82, 0x54, 0xcc, 0xc5, 0x89, 0x7b, 0x90, 0x6b,
	0xde, 0x6a, 0x0c, 0x4b, 0xfa, 0xaa, 0x55, 0x8b, 0xcf, 0xcf, 0x06, 0x76, 0x8e, 0xec, 0x40, 0x55,
	0xd9, 0x44, 0xd3, 0x16, 0xe2, 0xeb, 0x13, 0x1c, 0xb7, 0x5a, 0x71, 0x78, 0xd7, 0x4c, 0x76, 0x8e,
	0x6c, 0xc3, 0xc2, 0xbe, 0xeb, 0xca, 0xfe, 0x67, 0x0f, 0x9a, 0xf5, 0xfc, 0x76, 0x8e, 0xec, 0x42,
	0xdd, 0xc1, 0x1b, 0x36, 0xc2, 0x03, 0xaa, 0x12, 0x44, 0x3a, 0x43, 0x16, 0x3c, 0xd5, 0xf3, 0x09,
	0xac, 0xea, 0xba, 0x53, 0x33, 0x69, 0x7a, 0xa2, 0xdf, 0xbb, 0x3e, 0x9b, 0xd5, 0xc9, 0x16, 0x2c,
	0x9a, 0x6d, 0x4f, 0x4b, 0x97, 0xf4, 0x41, 0xaa, 0x8d, 0x6d, 0xa8, 0xef, 0xbb, 0x6e, 0x62, 0x79,
	0x67, 0xab, 0x70, 0x97, 0xba, 0x07, 0x0d, 0x33, 0xfe, 0x5f, 0xb0, 0xbb, 0xf0, 0xef, 0x11, 0x8a,
	0x04, 0xd5, 0xa8, 0xf7, 0x7f, 0x0c, 0x4c, 0x7b, 0x6a, 0x96, 0x00, 0xaf, 0x61, 0x59, 0x19, 0x65,
	0xac, 0x3c, 0xa3, 0x33, 0xfd, 0x17, 0x63, 0x53, 0x56, 0x4a, 0xf5, 0xb3, 0x0b, 0x75, 0xf9, 0x0d,
	0xfa, 0x2c, 0x18, 0xc7, 0x7b, 0x96, 0x89, 0xc4, 0xa1, 0xf9, 0x6c, 0x29, 0x15, 0x57, 0x8c, 0x75,
	0x54, 0x02, 0xcd, 0xcd, 0x00, 0xa7, 0xea, 0xbe, 0x82, 0xc6, 0xd4, 0x75, 0x18, 0xfa, 0xb2, 0xbd,
	0x3f, 0xa1, 0xef, 0x41, 0xdd, 0xd0, 0xbb, 0x8c, 0x0d, 0x86, 0x61, 0x76, 0xdb, 0xd9, 0xb2, 0x5d,
	0xcc, 0xab, 0x8f, 0xfa, 0xe6, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0x19, 0x98, 0x13, 0xea,
	0x07, 0x00, 0x00,
}
